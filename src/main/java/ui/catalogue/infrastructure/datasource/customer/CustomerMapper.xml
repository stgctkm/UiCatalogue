<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="ui.catalogue.infrastructure.datasource.customer.CustomerMapper">

    <insert id="register">
        INSERT INTO 顧客.顧客 (顧客ID, 顧客番号)
        VALUES (#{customerId.value},
                #{customerNumber.value})
    </insert>

    <insert id="registerRevision">
        INSERT INTO 顧客.顧客リビジョン (顧客ID, リビジョン)
        VALUES (#{customerId.value},
                #{revision})
    </insert>

    <insert id="registerCustomerName">
        INSERT INTO 顧客.顧客名称 (顧客ID, リビジョン, 顧客名, 顧客名カナ)
        VALUES (#{customerId.value},
                #{revision},
                #{customerName.name},
                #{customerName.nameKana})
    </insert>

    <insert id="registerContact">
        INSERT INTO 顧客.連絡先 (顧客ID, リビジョン, Eメール, 郵便番号, 住所, 建物, 電話番号, 担当者名, 担当部署)
        VALUES (#{customerId.value},
                #{revision},
                #{contact.email.value},
                #{contact.address.postalCode.value},
                #{contact.address.addressLine},
                #{contact.address.building},
                #{contact.phoneNumber.value},
                #{contact.personInCharge},
                #{contact.division})
    </insert>

    <insert id="registerActive">
        INSERT INTO 顧客._現在の顧客リビジョン (顧客ID, リビジョン)
        VALUES (#{customerId.value},
                #{revision})
    </insert>

    <delete id="deleteActive">
        DELETE
        FROM 顧客._現在の顧客リビジョン
        WHERE 顧客ID = #{customerId.value}
    </delete>

    <resultMap id="customerId" type="ui.catalogue.domain.model.customer.identifier.CustomerId">
        <constructor>
            <idArg javaType="string" column="顧客ID"/>
        </constructor>
    </resultMap>

    <resultMap id="customerNumber" type="ui.catalogue.domain.model.customer.identifier.CustomerNumber">
        <constructor>
            <idArg javaType="string" column="顧客番号"/>
        </constructor>
    </resultMap>

    <resultMap id="customerName" type="ui.catalogue.domain.model.customer.identifier.CustomerName">
        <constructor>
            <arg javaType="string" column="顧客名"/>
            <arg javaType="string" column="顧客名カナ"/>
        </constructor>
    </resultMap>

    <resultMap id="email" type="ui.catalogue.domain.model.customer.contact.Email">
        <constructor>
            <arg javaType="string" column="Eメール"/>
        </constructor>
    </resultMap>


    <resultMap id="phoneNumber" type="ui.catalogue.domain.primitive.contact.phone.PhoneNumber">
        <constructor>
            <arg javaType="string" column="電話番号"/>
        </constructor>
    </resultMap>

    <resultMap id="postalCode" type="ui.catalogue.domain.primitive.contact.address.PostalCode">
        <constructor>
            <arg javaType="string" column="郵便番号"/>
        </constructor>
    </resultMap>

    <resultMap id="contact" type="ui.catalogue.domain.model.customer.contact.Contact">
        <constructor>
            <arg resultMap="email" javaType="ui.catalogue.domain.model.customer.contact.Email"/>
            <arg resultMap="address" javaType="ui.catalogue.domain.primitive.contact.address.Address"/>
            <arg resultMap="phoneNumber" javaType="ui.catalogue.domain.primitive.contact.phone.PhoneNumber"/>
            <arg javaType="string" column="担当者名"/>
            <arg javaType="string" column="担当部署"/>
        </constructor>
    </resultMap>

    <resultMap id="address" type="ui.catalogue.domain.primitive.contact.address.Address">
        <constructor>
            <arg resultMap="postalCode" javaType="ui.catalogue.domain.primitive.contact.address.PostalCode"/>
            <arg javaType="string" column="住所"/>
            <arg javaType="string" column="建物"/>
        </constructor>
    </resultMap>

    <resultMap id="customerSummary" type="ui.catalogue.domain.model.customer.summary.CustomerSummary">
        <constructor>
            <idArg resultMap="customerId" javaType="ui.catalogue.domain.model.customer.identifier.CustomerId"/>
            <arg resultMap="customerNumber" javaType="ui.catalogue.domain.model.customer.identifier.CustomerNumber"/>
            <arg resultMap="customerName" javaType="ui.catalogue.domain.model.customer.identifier.CustomerName"/>
            <arg resultMap="phoneNumber" javaType="ui.catalogue.domain.primitive.contact.phone.PhoneNumber"/>
        </constructor>
    </resultMap>


    <select id="customerSummaries" resultMap="customerSummary">

        SELECT 顧客.顧客ID,
               顧客番号,
               顧客名,
               顧客名カナ,
               電話番号
        FROM 顧客.顧客
                 INNER JOIN 顧客.顧客リビジョン ON 顧客.顧客ID = 顧客リビジョン.顧客ID
                 INNER JOIN 顧客._現在の顧客リビジョン
                            ON 顧客リビジョン.顧客ID = _現在の顧客リビジョン.顧客ID AND 顧客リビジョン.リビジョン = _現在の顧客リビジョン.リビジョン
                 INNER JOIN 顧客.顧客名称 ON 顧客リビジョン.顧客ID = 顧客名称.顧客ID AND 顧客リビジョン.リビジョン = 顧客名称.リビジョン
                 INNER JOIN 顧客.連絡先 ON 顧客リビジョン.顧客ID = 連絡先.顧客ID AND 顧客リビジョン.リビジョン = 連絡先.リビジョン
    </select>

    <select id="newCustomerNumber" resultType="long">
        SELECT nextval('顧客.顧客番号')
    </select>

    <resultMap id="customer" type="ui.catalogue.domain.model.customer.Customer">
        <constructor>
            <idArg resultMap="customerNumber" javaType="ui.catalogue.domain.model.customer.identifier.CustomerNumber"/>
            <arg resultMap="customerName" javaType="ui.catalogue.domain.model.customer.identifier.CustomerName"/>
            <arg resultMap="contact" javaType="ui.catalogue.domain.model.customer.contact.Contact"/>
        </constructor>
    </resultMap>

    <select id="customerOf" resultMap="customer">
        SELECT
            顧客.顧客ID,
            顧客.顧客番号,
            顧客名,
            顧客名カナ,
            連絡先.Eメール,
            連絡先.郵便番号,
            連絡先.住所,
            連絡先.建物,
            連絡先.電話番号,
            連絡先.担当者名,
            連絡先.担当部署
        FROM 顧客.顧客
                 INNER JOIN 顧客.顧客リビジョン ON 顧客.顧客ID = 顧客リビジョン.顧客ID
                 INNER JOIN 顧客._現在の顧客リビジョン
                            ON 顧客リビジョン.顧客ID = _現在の顧客リビジョン.顧客ID AND 顧客リビジョン.リビジョン = _現在の顧客リビジョン.リビジョン
                 INNER JOIN 顧客.顧客名称 ON 顧客リビジョン.顧客ID = 顧客名称.顧客ID AND 顧客リビジョン.リビジョン = 顧客名称.リビジョン
                 INNER JOIN 顧客.連絡先 ON 顧客リビジョン.顧客ID = 連絡先.顧客ID AND 顧客リビジョン.リビジョン = 連絡先.リビジョン
        WHERE 顧客.顧客ID = #{customerId.value}
    </select>

</mapper>